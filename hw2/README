

	Included source files contain the basis for a bejeweled like game that has
yet to be named. This game is nearly functional, although there are bugs that
do not allow the user to play it in it's primitive state. The rules for the 
completed game will be as follows:
	The user has two minutes to acrue the highest score possible. Points are
earned when the user clicks on a tile and starts a cascade of tile activations.
If the original tile points to another tile (visible to the user by arrows),
the pointed to tile becomes active, additional points are earned, and a chain
of tiles pointing to other tiles is built until a stop tile is encountered, a
tile points off the edge of the board, or a tile points to a tile already in
the chain. Tiles are replaced after each move. The board is rendered unclickable
while a move is being processed.

To compile and run execute the following commands within the terminal:
	javac Main.java
	java Main

NOTE: If the user would like to attempt to play the game, uncomment the
game.startGame(); line in the actionPerformed
	

DESIGN FOR HW2 GAME

Main:
	Instance Variables: none
	Methods: Constructor
	Responsibilities:
		Set up main window
		Create THStatePanel and THGameManager instances

THStatePanel:
	Instance Variables:
		Pointer to JLabel that displays game time left
		Pointer to JLabel that displays the score of the current game
		Pointer to JButton that launches a new game
		Pointer to the only THGameManager in the application
	Methods:
		updateScore()
		updateTime()
		setGameManager()
		Overloaded actionPerformed, responds to button click
	Responsibilities:
		Displaying the current score and time left in the game
		Reacting to button presses and passing the message to start a new
			game after a button press
	Uses:
		THGameManager to update score and time values

THGameManager:
	Instance Variables:
		Pointer to the only THBoard in the application
		Pointer to the only THStatePanel in the application
		Pointer to a Timer instance
		Boolean describing if the game is active and should respond to
			MouseEvents
		Int containing time_left in the game
		Int containing the total score of the game
		Internal class THBoardSizer, which provides generic get and set methods
			so that a THGameManager function can return all data about board
			for internal use
		Int time_count that is incremented every hundredth of a second

	Methods:
		determineBoardAttributes(), determines overall board location and tile
			size, returns a THBoardSizer
		startGame(), creates a new THBoard and initializes variables for a
			new game. Starts Timer callbacks
		endGame(), stops timer callbacks, disables user manipulation of the
			board
		timeDelay(), delays thread by the specified number of hundredths of
			a second
		paintComponent(), tells the THBoard where to draw itself
		Overloaded actionPerformed(), increments time count, updates time in
			THStatePanel, and ends game if time is up
		Overloaded mouseClicked(), determines in which tile the mouse was
			clicked, sends that tile location to THBoard for further
			processing
	Responsibilities:
		Acts as the controller object for the application, interfaces model
		(THBoard and members) to view. Incharge of game time, game score,
		responding to mouse clicks with board area, and informing THBoard
		about where to draw itself
	Uses:
		THStatePanel to tell it when a new game should start

THBoard:
	Instance Variables:
		2D array of THTiles and two ints storing array size
		Pointer to THGameManager
	Methods:
		tileSwap(), switches the positions of two tiles within array,
			including relevant members of the tiles
		replaceColumn(), recursively replaces THTiles within the board from
			bottom to top for one column. Moves existing tiles above
			used tiles down before creating new tiles above
		replaceTiles(), calls replaceColumn() on all columns
		markTileChain(), recursively determines the path of tiles starting
			with the tile that the user selected. Returns the total score
			of the user's move
		userMove(), calls markTileChain() on the tile the user selects,
			replaces used THTiles, and returns score
		draw(), draws board background and grid, and tells each THTile in
			the array where to draw itself
		getArraySize(), returns dimensions of the array of THTiles
	Responsibilities:
		Acts as the main model object for the application. Maintains order of
		THTiles stored in array, recreates them as needed, and calculates the
		total score of user moves. Also tells the stored THTiles where to
		draw themselves
	Uses:
		THGameManager to tell it where to draw itself, and which tile a user
		clicked on. THTileFactory to generate random tiles. Individual THTiles
		to provide information about their place in the tile array. Graphics
		object passed form THGameManager

THTileFactory:
	Instance Variables: None
	Methods:
		createRandomTile(), static method that creates a new random tile
			depending upon what random number was generated by Math.random()
	Responsibilites:
		Generating new tiles randomly

THConstants:
	Instance Variables:
		Public static variables that act as constants for the application
	Methods: none
	Responsibilities:
		Providing access to constants by any object in any method

THTile:
	Instance Variables:
		Point array_position
		Boolean observed, contains knowledge of whether the tile is included
			in the chain of tiles created from the user input
	Methods:
		setArrayPosition(), sets the array_position of the tile to the
			specified point
		getArrayPosition(), returns the current array_position
		setObserved(), sets the observed member to true
		getObserved(), returns the value of observed
		getNextTilePosition(), returns the point of the next tile in the
			chain of tiles resulting from the user move. Abstract
		draw(), draws the tile given its location and size. Abstract
	Responsibilities:
		Knowing where it is located in the array and whether it has been
		used in the current user move sequence or not

THLeftTile, THRightTile, THUpTile, THDownTile, THStopTile:
	Inherits from THTile
	Methods:
		Implements the getNextTilePosition() and draw() abstract methods
			in a manner specific to each type of THTile
	Responsibilites:
		Knowing how to draw itself and where the next tile in the user move
		chain is relative to itself
	Uses:
		Graphics object passed down from THGameManager, THBoard to tell each
		type of tile where to draw itself


AGGREGATION HIERARCHY
	Main
		THStatePanel
		THGameManager
			THBoard
				THTile array
	THTileFactory
	THConstants

CLASS HIERARCHY
	Main
	THStatePanel
	THGameManager
	THBoard
	THTile
		THLeftTile
		THRightTile
		THUpTile
		THDownTile
		THStopTile
	THTileFactory
	THConstants
	
		







	
